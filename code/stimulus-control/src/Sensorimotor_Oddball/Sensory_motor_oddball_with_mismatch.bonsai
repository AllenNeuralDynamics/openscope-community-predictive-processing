<?xml version="1.0" encoding="utf-8"?>
<WorkflowBuilder Version="2.8.5"
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xmlns:gl="clr-namespace:Bonsai.Shaders;assembly=Bonsai.Shaders"
                 xmlns:res="clr-namespace:Bonsai.Resources;assembly=Bonsai.System"
                 xmlns:rx="clr-namespace:Bonsai.Reactive;assembly=Bonsai.Core"
                 xmlns:beh="clr-namespace:Harp.Behavior;assembly=Harp.Behavior"
                 xmlns:harp="clr-namespace:Bonsai.Harp;assembly=Bonsai.Harp"
                 xmlns:p1="clr-namespace:AllenNeuralDynamics.AindBehaviorServices.DataTypes;assembly=AllenNeuralDynamics.AindBehaviorServices"
                 xmlns:wie="clr-namespace:Bonsai.Windows.Input;assembly=Bonsai.Windows.Input"
                 xmlns:sys="clr-namespace:System;assembly=mscorlib"
                 xmlns:scr="clr-namespace:Bonsai.Scripting.Expressions;assembly=Bonsai.Scripting.Expressions"
                 xmlns="https://bonsai-rx.org/2018/workflow">
  <Workflow>
    <Nodes>
      <!-- OddballGenerator Workflow -->
      <Expression xsi:type="GroupWorkflow">
        <Name>OddballGenerator</Name>
        <Workflow>
          <Nodes>
            <!-- Generate random oddball events with intervals of 10-30 seconds -->
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Timer">
                <rx:DueTime>PT10S</rx:DueTime>
                <rx:Period>PT0S</rx:Period>
              </Combinator>
            </Expression>
            
            <!-- Random number generator for timing -->
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="gl:CreateRandom">
                <gl:Seed>42</gl:Seed>
              </Combinator>
            </Expression>
            
            <!-- Random value between 0-1 -->
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="FloatProperty">
                <Value>1</Value>
              </Combinator>
            </Expression>
            
            <!-- Combine random generator with value -->
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Zip" />
            </Expression>
            
            <!-- Multiply to get random interval -->
            <Expression xsi:type="Multiply" />
            
            <!-- Scale to 10-30 seconds -->
            <Expression xsi:type="Multiply">
              <Operand xsi:type="DoubleProperty">
                <Value>20</Value>
              </Operand>
            </Expression>
            
            <Expression xsi:type="Add">
              <Operand xsi:type="DoubleProperty">
                <Value>10</Value>
              </Operand>
            </Expression>
            
            <!-- Convert to TimeSpan -->
            <Expression xsi:type="scr:ExpressionTransform">
              <scr:Expression>TimeSpan.FromSeconds(it)</scr:Expression>
            </Expression>
            
            <!-- Set as next timer due time -->
            <Expression xsi:type="PropertyMapping">
              <PropertyMappings>
                <Property Name="DueTime" />
              </PropertyMappings>
            </Expression>
            
            <!-- This timer controls oddball duration -->
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="gl:Timer">
                <gl:DueTime>PT0.5S</gl:DueTime>
              </Combinator>
            </Expression>
            
            <!-- Set oddball state to true -->
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="BooleanProperty">
                <Value>true</Value>
              </Combinator>
            </Expression>
            
            <!-- Log oddball start -->
            <Expression xsi:type="IncludeWorkflow" Path="BonVision:Logging.LogEvent.bonsai">
              <Format>ODDBALL_START</Format>
              <Selector xsi:nil="true" />
              <Name>Allen.Log</Name>
            </Expression>
            
            <!-- Take only one value from timer -->
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Take">
                <rx:Count>1</rx:Count>
              </Combinator>
            </Expression>
            
            <!-- Set oddball state to false -->
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="BooleanProperty">
                <Value>false</Value>
              </Combinator>
            </Expression>
            
            <!-- Log oddball end -->
            <Expression xsi:type="IncludeWorkflow" Path="BonVision:Logging.LogEvent.bonsai">
              <Format>ODDBALL_END</Format>
              <Selector xsi:nil="true" />
              <Name>Allen.Log</Name>
            </Expression>
            
            <!-- Merge the true/false states -->
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Merge" />
            </Expression>
            
            <!-- Limit to 12 oddballs per session -->
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Take">
                <rx:Count>12</rx:Count>
              </Combinator>
            </Expression>
            
            <!-- Output the oddball state -->
            <Expression xsi:type="WorkflowOutput" />
            
            <!-- Edges connect the nodes -->
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            
          </Nodes>
          <Edges>
            <Edge From="0" To="9" Label="Source1" />
            <Edge From="1" To="3" Label="Source1" />
            <Edge From="2" To="3" Label="Source2" />
            <Edge From="3" To="4" Label="Source1" />
            <Edge From="4" To="5" Label="Source1" />
            <Edge From="5" To="6" Label="Source1" />
            <Edge From="6" To="7" Label="Source1" />
            <Edge From="7" To="8" Label="Source1" />
            <Edge From="8" To="0" Label="Source1" />
            <Edge From="9" To="10" Label="Source1" />
            <Edge From="10" To="11" Label="Source1" />
            <Edge From="11" To="12" Label="Source1" />
            <Edge From="12" To="13" Label="Source1" />
            <Edge From="13" To="14" Label="Source1" />
            <Edge From="14" To="15" Label="Source1" />
            <Edge From="11" To="16" Label="Source1" />
            <Edge From="14" To="16" Label="Source2" />
            <Edge From="16" To="17" Label="Source1" />
            <Edge From="17" To="18" Label="Source1" />
            <Edge From="19" To="0" Label="Source2" />
          </Edges>
        </Workflow>
      </Expression>

      <!-- The rest of your existing workflow -->
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="gl:CreateWindow">
          <gl:Width>560</gl:Width>
          <gl:Height>480</gl:Height>
          <gl:VSync>On</gl:VSync>
          <gl:SwapSync>false</gl:SwapSync>
          <gl:ClearColor>Navy</gl:ClearColor>
          <gl:ClearMask>DepthBufferBit ColorBufferBit</gl:ClearMask>
          <gl:CursorVisible>true</gl:CursorVisible>
          <gl:Location xsi:nil="true" />
          <gl:WindowBorder>Fixed</gl:WindowBorder>
          <gl:WindowState>Fullscreen</gl:WindowState>
          <gl:DisplayDevice>First</gl:DisplayDevice>
          <gl:TargetRenderFrequency>60</gl:TargetRenderFrequency>
          <gl:TargetUpdateFrequency xsi:nil="true" />
          <gl:RenderState />
          <gl:GraphicsMode>
            <gl:ColorFormat>
              <gl:Red>8</gl:Red>
              <gl:Green>8</gl:Green>
              <gl:Blue>8</gl:Blue>
              <gl:Alpha>8</gl:Alpha>
            </gl:ColorFormat>
            <gl:Depth>16</gl:Depth>
            <gl:Stencil>0</gl:Stencil>
            <gl:Samples>0</gl:Samples>
            <gl:AccumulatorFormat>
              <gl:Red>0</gl:Red>
              <gl:Green>0</gl:Green>
              <gl:Blue>0</gl:Blue>
              <gl:Alpha>0</gl:Alpha>
            </gl:AccumulatorFormat>
            <gl:Buffers>2</gl:Buffers>
            <gl:Stereo>false</gl:Stereo>
          </gl:GraphicsMode>
        </Combinator>
      </Expression>
      <Expression xsi:type="IncludeWorkflow" Path="BonVision:Primitives.BonVisionResources.bonsai" />
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="gl:ShaderResources">
          <gl:Shaders>
            <gl:ShaderConfiguration xsi:type="gl:Material">
              <gl:Name>ColoredGratings</gl:Name>
              <gl:RenderState />
              <gl:ShaderUniforms />
              <gl:BufferBindings />
              <gl:FramebufferAttachments />
              <gl:VertexShader>BonVision:Shaders.Gratings.vert</gl:VertexShader>
              <gl:FragmentShader>..\bonsai\Shaders\ColoredGratings.frag</gl:FragmentShader>
            </gl:ShaderConfiguration>
          </gl:Shaders>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="res:LoadResources" />
      </Expression>
      <!-- ... existing code omitted for brevity ... -->

      <!-- Publish the oddball state -->
      <Expression xsi:type="rx:PublishSubject">
        <Name>OddballState</Name>
      </Expression>

      <!-- Modified encoder to phase mapping that includes oddball functionality -->
      <Expression xsi:type="SubscribeSubject">
        <Name>Encoder</Name>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Value</Selector>
      </Expression>
      
      <!-- Get the current oddball state -->
      <Expression xsi:type="SubscribeSubject">
        <Name>OddballState</Name>
      </Expression>
      
      <!-- Combine encoder value with oddball state -->
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="rx:WithLatestFrom" />
      </Expression>
      
      <!-- Calculate phase based on oddball state -->
      <Expression xsi:type="scr:ExpressionTransform">
        <scr:Expression>
          // Get the encoder value and oddball state
          double encoderValue = Item1;
          bool isOddball = Item2;
          
          // Normal behavior: normalize, scale, and use modulo
          double normalPhase = (encoderValue / 300.0) % 360.0;
          
          // During oddball, reverse the direction
          if(isOddball) {
            return (360.0 - normalPhase) % 360.0;
          }
          
          return normalPhase;
        </scr:Expression>
      </Expression>
      
      <Expression xsi:type="PropertyMapping">
        <PropertyMappings>
          <Property Name="Phase" />
        </PropertyMappings>
      </Expression>
      
      <!-- Rest of the DrawGratings workflow -->
      <Expression xsi:type="IncludeWorkflow" Path="BonVision:Primitives.DrawGratings.bonsai">
        <LocationX>0</LocationX>
        <LocationY>0</LocationY>
        <Layer>0</Layer>
        <ExtentX>90</ExtentX>
        <ExtentY>90</ExtentY>
        <SpatialFrequency>0.04</SpatialFrequency>
        <TemporalFrequency>0</TemporalFrequency>
        <Phase>0</Phase>
        <Angle>0</Angle>
        <SquareWave>false</SquareWave>
        <Contrast>1</Contrast>
        <DutyCycle xsi:nil="true" />
        <Radius>100</Radius>
        <Aperture>90</Aperture>
        <Opacity>1</Opacity>
      </Expression>

      <!-- Start the oddball generator after gratings start -->
      <Expression xsi:type="SubscribeSubject">
        <Name>StartGratings</Name>
      </Expression>

      <Expression xsi:type="Combinator">
        <Combinator xsi:type="rx:SubscribeWhen" />
      </Expression>

      <!-- ... rest of existing workflow ... -->
    </Nodes>
    <Edges>
      <!-- New edges for oddball functionality -->
      <Edge From="0" To="6" Label="Source1" />
      <Edge From="7" To="8" Label="Source1" />
      <Edge From="8" To="10" Label="Source1" />
      <Edge From="9" To="10" Label="Source2" />
      <Edge From="10" To="11" Label="Source1" />
      <Edge From="11" To="12" Label="Source1" />
      <Edge From="12" To="13" Label="Source1" />
      <Edge From="14" To="15" Label="Source1" />
      <Edge From="0" To="15" Label="Source2" />
      
      <!-- ... existing edges ... -->
    </Edges>
  </Workflow>
</WorkflowBuilder>